

package com.mapbox.services.android.navigation.v5.routeprogress;

import androidx.annotation.Nullable;
import androidx.core.util.Pair;
import com.mapbox.api.directions.v5.models.LegStep;
import com.mapbox.api.directions.v5.models.StepIntersection;
import java.util.List;

// Generated by com.google.auto.value.processor.AutoValueProcessor
 final class AutoValue_RouteStepProgress extends RouteStepProgress {

  private final double distanceRemaining;
  private final double distanceTraveled;
  private final float fractionTraveled;
  private final double durationRemaining;
  private final List<StepIntersection> intersections;
  private final StepIntersection currentIntersection;
  private final StepIntersection upcomingIntersection;
  private final List<Pair<StepIntersection, Double>> intersectionDistancesAlongStep;
  private final LegStep step;
  private final LegStep nextStep;

  private AutoValue_RouteStepProgress(
      double distanceRemaining,
      double distanceTraveled,
      float fractionTraveled,
      double durationRemaining,
      List<StepIntersection> intersections,
      StepIntersection currentIntersection,
      @Nullable StepIntersection upcomingIntersection,
      List<Pair<StepIntersection, Double>> intersectionDistancesAlongStep,
      LegStep step,
      @Nullable LegStep nextStep) {
    this.distanceRemaining = distanceRemaining;
    this.distanceTraveled = distanceTraveled;
    this.fractionTraveled = fractionTraveled;
    this.durationRemaining = durationRemaining;
    this.intersections = intersections;
    this.currentIntersection = currentIntersection;
    this.upcomingIntersection = upcomingIntersection;
    this.intersectionDistancesAlongStep = intersectionDistancesAlongStep;
    this.step = step;
    this.nextStep = nextStep;
  }

  @Override
  public double distanceRemaining() {
    return distanceRemaining;
  }

  @Override
  public double distanceTraveled() {
    return distanceTraveled;
  }

  @Override
  public float fractionTraveled() {
    return fractionTraveled;
  }

  @Override
  public double durationRemaining() {
    return durationRemaining;
  }

  @Override
  public List<StepIntersection> intersections() {
    return intersections;
  }

  @Override
  public StepIntersection currentIntersection() {
    return currentIntersection;
  }

  @Nullable
  @Override
  public StepIntersection upcomingIntersection() {
    return upcomingIntersection;
  }

  @Override
  public List<Pair<StepIntersection, Double>> intersectionDistancesAlongStep() {
    return intersectionDistancesAlongStep;
  }

  @Override
  LegStep step() {
    return step;
  }

  @Nullable
  @Override
  LegStep nextStep() {
    return nextStep;
  }

  @Override
  public String toString() {
    return "RouteStepProgress{"
         + "distanceRemaining=" + distanceRemaining + ", "
         + "distanceTraveled=" + distanceTraveled + ", "
         + "fractionTraveled=" + fractionTraveled + ", "
         + "durationRemaining=" + durationRemaining + ", "
         + "intersections=" + intersections + ", "
         + "currentIntersection=" + currentIntersection + ", "
         + "upcomingIntersection=" + upcomingIntersection + ", "
         + "intersectionDistancesAlongStep=" + intersectionDistancesAlongStep + ", "
         + "step=" + step + ", "
         + "nextStep=" + nextStep
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof RouteStepProgress) {
      RouteStepProgress that = (RouteStepProgress) o;
      return (Double.doubleToLongBits(this.distanceRemaining) == Double.doubleToLongBits(that.distanceRemaining()))
           && (Double.doubleToLongBits(this.distanceTraveled) == Double.doubleToLongBits(that.distanceTraveled()))
           && (Float.floatToIntBits(this.fractionTraveled) == Float.floatToIntBits(that.fractionTraveled()))
           && (Double.doubleToLongBits(this.durationRemaining) == Double.doubleToLongBits(that.durationRemaining()))
           && (this.intersections.equals(that.intersections()))
           && (this.currentIntersection.equals(that.currentIntersection()))
           && ((this.upcomingIntersection == null) ? (that.upcomingIntersection() == null) : this.upcomingIntersection.equals(that.upcomingIntersection()))
           && (this.intersectionDistancesAlongStep.equals(that.intersectionDistancesAlongStep()))
           && (this.step.equals(that.step()))
           && ((this.nextStep == null) ? (that.nextStep() == null) : this.nextStep.equals(that.nextStep()));
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h$ = 1;
    h$ *= 1000003;
    h$ ^= (int) ((Double.doubleToLongBits(distanceRemaining) >>> 32) ^ Double.doubleToLongBits(distanceRemaining));
    h$ *= 1000003;
    h$ ^= (int) ((Double.doubleToLongBits(distanceTraveled) >>> 32) ^ Double.doubleToLongBits(distanceTraveled));
    h$ *= 1000003;
    h$ ^= Float.floatToIntBits(fractionTraveled);
    h$ *= 1000003;
    h$ ^= (int) ((Double.doubleToLongBits(durationRemaining) >>> 32) ^ Double.doubleToLongBits(durationRemaining));
    h$ *= 1000003;
    h$ ^= intersections.hashCode();
    h$ *= 1000003;
    h$ ^= currentIntersection.hashCode();
    h$ *= 1000003;
    h$ ^= (upcomingIntersection == null) ? 0 : upcomingIntersection.hashCode();
    h$ *= 1000003;
    h$ ^= intersectionDistancesAlongStep.hashCode();
    h$ *= 1000003;
    h$ ^= step.hashCode();
    h$ *= 1000003;
    h$ ^= (nextStep == null) ? 0 : nextStep.hashCode();
    return h$;
  }

  static final class Builder extends RouteStepProgress.Builder {
    private Double distanceRemaining;
    private Double distanceTraveled;
    private Float fractionTraveled;
    private Double durationRemaining;
    private List<StepIntersection> intersections;
    private StepIntersection currentIntersection;
    private StepIntersection upcomingIntersection;
    private List<Pair<StepIntersection, Double>> intersectionDistancesAlongStep;
    private LegStep step;
    private LegStep nextStep;
    Builder() {
    }
    @Override
    RouteStepProgress.Builder distanceRemaining(double distanceRemaining) {
      this.distanceRemaining = distanceRemaining;
      return this;
    }
    @Override
    double distanceRemaining() {
      if (distanceRemaining == null) {
        throw new IllegalStateException("Property \"distanceRemaining\" has not been set");
      }
      return distanceRemaining;
    }
    @Override
    RouteStepProgress.Builder distanceTraveled(double distanceTraveled) {
      this.distanceTraveled = distanceTraveled;
      return this;
    }
    @Override
    RouteStepProgress.Builder fractionTraveled(float fractionTraveled) {
      this.fractionTraveled = fractionTraveled;
      return this;
    }
    @Override
    RouteStepProgress.Builder durationRemaining(double durationRemaining) {
      this.durationRemaining = durationRemaining;
      return this;
    }
    @Override
    RouteStepProgress.Builder intersections(List<StepIntersection> intersections) {
      if (intersections == null) {
        throw new NullPointerException("Null intersections");
      }
      this.intersections = intersections;
      return this;
    }
    @Override
    RouteStepProgress.Builder currentIntersection(StepIntersection currentIntersection) {
      if (currentIntersection == null) {
        throw new NullPointerException("Null currentIntersection");
      }
      this.currentIntersection = currentIntersection;
      return this;
    }
    @Override
    RouteStepProgress.Builder upcomingIntersection(@Nullable StepIntersection upcomingIntersection) {
      this.upcomingIntersection = upcomingIntersection;
      return this;
    }
    @Override
    RouteStepProgress.Builder intersectionDistancesAlongStep(List<Pair<StepIntersection, Double>> intersectionDistancesAlongStep) {
      if (intersectionDistancesAlongStep == null) {
        throw new NullPointerException("Null intersectionDistancesAlongStep");
      }
      this.intersectionDistancesAlongStep = intersectionDistancesAlongStep;
      return this;
    }
    @Override
    RouteStepProgress.Builder step(LegStep step) {
      if (step == null) {
        throw new NullPointerException("Null step");
      }
      this.step = step;
      return this;
    }
    @Override
    LegStep step() {
      if (step == null) {
        throw new IllegalStateException("Property \"step\" has not been set");
      }
      return step;
    }
    @Override
    RouteStepProgress.Builder nextStep(@Nullable LegStep nextStep) {
      this.nextStep = nextStep;
      return this;
    }
    @Override
    RouteStepProgress autoBuild() {
      String missing = "";
      if (this.distanceRemaining == null) {
        missing += " distanceRemaining";
      }
      if (this.distanceTraveled == null) {
        missing += " distanceTraveled";
      }
      if (this.fractionTraveled == null) {
        missing += " fractionTraveled";
      }
      if (this.durationRemaining == null) {
        missing += " durationRemaining";
      }
      if (this.intersections == null) {
        missing += " intersections";
      }
      if (this.currentIntersection == null) {
        missing += " currentIntersection";
      }
      if (this.intersectionDistancesAlongStep == null) {
        missing += " intersectionDistancesAlongStep";
      }
      if (this.step == null) {
        missing += " step";
      }
      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new AutoValue_RouteStepProgress(
          this.distanceRemaining,
          this.distanceTraveled,
          this.fractionTraveled,
          this.durationRemaining,
          this.intersections,
          this.currentIntersection,
          this.upcomingIntersection,
          this.intersectionDistancesAlongStep,
          this.step,
          this.nextStep);
    }
  }

}
